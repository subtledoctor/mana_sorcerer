
//---------------------------------------------------------------
// FJ_SPL_ITM_REINDEX and ADD_SPELL_HEADER (by Ardanis, etc.)
//---------------------------------------------------------------
DEFINE_PATCH_FUNCTION ~FJ_SPL_ITM_REINDEX~ BEGIN

PATCH_IF !(~%SOURCE_FILE%~ STRING_MATCHES_REGEXP ~^.+\.spl~) BEGIN
  hs = 0x28
  WRITE_LONG 0xc ~-1~ //Identified name
  WRITE_LONG 0x54 ~-1~ //Identified description
  PATCH_FOR_EACH tz IN 0x44 0x48 0x58 0x5c BEGIN
    WRITE_LONG tz 0
  END
END ELSE PATCH_IF !(~%SOURCE_FILE%~ STRING_MATCHES_REGEXP ~^.+\.itm~) BEGIN
  hs = 0x38
END
READ_LONG 0x64 hf //Extended header offset
READ_SHORT 0x68 hc //Extended header count
READ_LONG 0x6a fb //Feature block table offset
READ_SHORT 0x70 fc //Feature block count
PATCH_IF ((hf > fb) AND (hc > 0)) BEGIN // Ardanis: fixed "hc > 1" to "hc > 0"
  READ_ASCII hf ~eh~ ELSE ~fail~ (hs * hc)
  PATCH_IF (~%eh%~ STRING_EQUAL ~fail~) BEGIN
    WHILE ((~%eh%~ STRING_EQUAL ~fail~) AND (hc > 0)) BEGIN
      READ_ASCII hf ~eh~ ELSE ~fail~ (hs * hc)
      hc -= 1
    END
  END
  DELETE_BYTES hf (hs * hc)
  hf = 0x72
  WRITE_LONG 0x64 hf
  WRITE_SHORT 0x68 hc
  fb = (0x72 + (hs * hc))
  WRITE_LONG 0x6a fb
  PATCH_IF !(~%eh%~ STRING_EQUAL ~fail~) BEGIN
    INSERT_BYTES hf (hs * hc)
    WRITE_ASCIIE hf ~%eh%~
  END
END ELSE PATCH_IF ((hf != 0x72) AND (hc = 0)) BEGIN
  hf = 0x72
  WRITE_LONG 0x64 hf
END
FOR (i1 = 0; i1 < (hs * hc); i1 += hs) BEGIN
  WRITE_SHORT (hf + i1 + 0x20) fc
  READ_SHORT (hf + i1 + 0x1e) cx
  fc += cx
END
PATCH_IF (SOURCE_SIZE > (0x72 + (hs * hc) + (0x30 * fc))) BEGIN
  DELETE_BYTES (0x72 + (hs * hc) + (0x30 * fc)) (SOURCE_SIZE - (0x72 + (hs * hc) + (0x30 * fc)))
END
// added by Ardanis
WRITE_SHORT 0x6e 0
END // end of function

DEFINE_PATCH_FUNCTION ~ADD_SPELL_HEADER~
  INT_VAR
    type=1
    location=4
    target=1
    target_count=0
    range=0
    required_level=1
    speed=0
    projectile=1
    copy_header=0
    insert_point=~-1~
  STR_VAR
    icon=~~
  RET
    insert_point
BEGIN
//  LPF ~FJ_SPL_ITM_REINDEX~ END
  hs=0x28
  READ_LONG 0x64 ho
  READ_SHORT 0x68 hc
  READ_LONG 0x6a eo
  insert_point = (insert_point>hc || insert_point<0) ? hc : insert_point
  copy_header = (copy_header<0) ? 0 : copy_header
  PATCH_IF copy_header>hc BEGIN
    PATCH_WARN ~Unable to copy %copy_header%th header, %SOURCE_FILE% contains only %hc% headers!~
  END ELSE BEGIN
    INSERT_BYTES ho+insert_point*hs hs
    hc+=1
    eo+=hs
    PATCH_IF copy_header BEGIN
      READ_SHORT ho+(copy_header - 1)*hs+0x1e ec
      READ_SHORT ho+(copy_header - 1)*hs+0x20 ei
      READ_ASCII eo+ei*0x30 effs (ec*0x30)
      READ_ASCII ho+(copy_header - 1)*hs copy (hs)
      WRITE_ASCIIE ho+insert_point*hs ~%copy%~ (hs)
    END
    WRITE_SHORT 0x68 hc
    WRITE_LONG 0x6a eo
    READ_SHORT 0x70 ei // technically, it is a counter
    FOR (i=ho;i<ho+hc*hs;i+=hs) BEGIN
      READ_SHORT i+0x1e ec
      WRITE_SHORT i+0x20 ei
      ei+=ec
    END
    PATCH_IF copy_header BEGIN
      READ_SHORT ho+insert_point*hs+0x1e ec
      READ_SHORT ho+insert_point*hs+0x20 ei
      INSERT_BYTES eo+ei*0x30 ec*0x30
      WRITE_ASCIIE eo+ei*0x30 ~%effs%~ (ec*0x30)
    END ELSE BEGIN
      off=ho+insert_point*hs
      WRITE_BYTE off type
      WRITE_BYTE off+0x2 location
      WRITE_ASCIIE off+0x4 ~%icon%~ (8)
      WRITE_BYTE off+0xc target
      WRITE_BYTE off+0xd target_count
      WRITE_SHORT off+0xe range
      WRITE_SHORT off+0x10 required_level
      WRITE_LONG off+0x12 speed
      WRITE_SHORT off+0x26 projectile
    END
  END
END	
//__________________________________________________________________________________


//ARMORED CASTING MACRO by SubtleDoctor_______________________________________________
//
DEFINE_ACTION_MACRO D5_ARMORED_CASTING BEGIN
  ACTION_IF NOT FILE_EXISTS_IN_GAME ~d5_armcast.d5~ BEGIN
	COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
	  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
		READ_SHORT 0x1c type
		READ_LONG 0x22 appearance
		PATCH_IF (type = 2) BEGIN // armor
		  PATCH_IF (appearance = 16690) BEGIN // leather appearance
			LPF ALTER_EFFECT INT_VAR silent = 1 match_opcode = 145 opcode = 177 parameter1 = 0 parameter2 = 2 STR_VAR resource = ~D5ARCAL~ END
		  END
		  PATCH_IF (appearance = 16691) BEGIN // chain appearance
			LPF ALTER_EFFECT INT_VAR silent = 1 match_opcode = 145 opcode = 177 parameter1 = 0 parameter2 = 2 STR_VAR resource = ~D5ARCAC~ END
		  END
		  PATCH_IF (appearance = 16692) BEGIN // plate appearance
			LPF ALTER_EFFECT INT_VAR silent = 1 match_opcode = 145 opcode = 177 parameter1 = 0 parameter2 = 2 STR_VAR resource = ~D5ARCAP~ END
		  END
		END
	  END
	BUT_ONLY
	CREATE EFF ~d5arcal~											// 	disable casting, leather armors
		WRITE_LONG 0x10 145
		WRITE_LONG 0x14 1
		WRITE_LONG 0x20 0
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_LONG 0x90 1
		WRITE_ASCII 0x94 ~D5ARCAL~ #8
	CREATE EFF ~d5arcac~											// 	disable casting, chain armors
		WRITE_LONG 0x10 145
		WRITE_LONG 0x14 1
		WRITE_LONG 0x20 0
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_LONG 0x90 1
		WRITE_ASCII 0x94 ~D5ARCAC~ #8
	CREATE EFF ~d5arcap~											// 	disable casting, plate armors
		WRITE_LONG 0x10 145
		WRITE_LONG 0x14 1
		WRITE_LONG 0x20 0
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_LONG 0x90 1
		WRITE_ASCII 0x94 ~D5ARCAP~ #8
	CREATE EFF ~d5arca1~											// 	immunity to d5arcaL
		WRITE_LONG 0x10 206
		WRITE_LONG 0x14 1
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_ASCII 0x30 ~D5ARCAL~ #8
	CREATE EFF ~d5arca2~											// 	immunity to d5arcaC
		WRITE_LONG 0x10 206
		WRITE_LONG 0x14 1
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_ASCII 0x30 ~D5ARCAC~ #8
	CREATE EFF ~d5arca3~											// 	immunity to d5arcaP
		WRITE_LONG 0x10 206
		WRITE_LONG 0x14 1
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_ASCII 0x30 ~D5ARCAP~ #8

	CREATE SPL ~d5arca1~
	COPY_EXISTING ~d5arca1.spl~ ~override~ 							// 	immunity to d5arcaL
		LPF ADD_SPELL_HEADER INT_VAR target = 5 END   
	COPY_EXISTING ~d5arca1.spl~ ~override~ 
		WRITE_BYTE 0x19 0
		LPF ADD_SPELL_EFFECT INT_VAR opcode = 206 target = 1 parameter1 = (0 - 1) timing = 9 STR_VAR resource = ~d5arcal~ END
	CREATE SPL ~d5arca2~
	COPY_EXISTING ~d5arca2.spl~ ~override~ 							// 	immunity to d5arcaC
		LPF ADD_SPELL_HEADER INT_VAR target = 5 END   
	COPY_EXISTING ~d5arca2.spl~ ~override~ 
		WRITE_BYTE 0x19 0
		LPF ADD_SPELL_EFFECT INT_VAR opcode = 206 target = 1 parameter1 = (0 - 1) timing = 9 STR_VAR resource = ~d5arcac~ END
	CREATE SPL ~d5arca3~
	COPY_EXISTING ~d5arca3.spl~ ~override~ 							// 	immunity to d5arcaP
		LPF ADD_SPELL_HEADER INT_VAR target = 5 END   
	COPY_EXISTING ~d5arca3.spl~ ~override~ 
		WRITE_BYTE 0x19 0
		LPF ADD_SPELL_EFFECT INT_VAR opcode = 206 target = 1 parameter1 = (0 - 1) timing = 9 STR_VAR resource = ~d5arcap~ END

	COPY_EXISTING ~sw1h04.itm~ ~override/d5_armcast.d5~				// 	marker file
  END
END
//__________________________________________________________________________________
